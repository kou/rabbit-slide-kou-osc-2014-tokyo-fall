= いろいろ考えると\n日本語の全文検索も\nMySQLがいいね！

: author
   須藤功平
: institution
   日本MySQLユーザ会
: content-source
   OSC2014 Tokyo/Fall
: date
   2014/10/18
: allotted-time
   45m
: theme
   .

= 目標

日本語対応の\n
全文検索機能を\n
(('note:（そこそこ仕組みをわかった上で）'))\n
実装できる

= 前提

  * MySQLを使っている
  * まあまあかそこそこのデータ量
    * ビッグデータ云々じゃない\n
      (('note:（そういう人はHadoopの枠に行っているよね？）'))
  * 日本語テキストを検索したい
  * でも、全文検索をよく知らない

= 全文検索について

全文検索とは…

= とりあえず動かそう

  * データベース作成
  * テーブル作成
  * データ投入
  * 全文検索！

= データベース作成

  # coderay sql
  CREATE DATABASE full_text_search;
  USE full_text_search;

= テーブル作成

  # coderay sql
  CREATE TABLE memos (
    content TEXT
  ) DEFAULT CHARSET=utf8mb4;

= データ投入

  # coderay sql
  INSERT INTO memos
    VALUES ("Hello world!"),
           ("Good-bye world!"),
           ("Hello MySQL!");

= 全文検索！

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%Hello%";
  -- +--------------+
  -- | content      |
  -- +--------------+
  -- | Hello world! |
  -- | Hello MySQL! |
  -- +--------------+

= 全文検索！ - もっと

  * AND
  * OR
  * 大文字小文字無視
  * 日本語

= 全文検索！ - AND

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%Hello%" AND
          content LIKE "%world%";
  -- +--------------+
  -- | content      |
  -- +--------------+
  -- | Hello world! |
  -- +--------------+

= 全文検索！ - OR

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%world%" OR
          content LIKE "%Good%";
  -- +-----------------+
  -- | content         |
  -- +-----------------+
  -- | Hello world!    |
  -- | Good-bye world! |
  -- +-----------------+

= 大文字小文字無視

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%mysql%";
  -- +--------------+
  -- | content      |
  -- +--------------+
  -- | Hello MySQL! |
  -- +--------------+

= 大文字小文字無視 - 理由

  # coderay sql
  SHOW TABLE STATUS LIKE "memos"\G
  -- ...
  -- Collation: utf8mb4_general_ci
  -- ...

= Collation

  * 照合順序(('note:（って言われてわかる？）'))
  * 文字の比較ルール
    * 「a」と「b」はどっちが大きい？
    * 「a」と「A」は等しい？
  * utf8mb4_general_ci
    * 同じようなアルファベットは同一視\n
      (('note:（直感的だけど雑な説明）'))

= 日本語 - データ投入

  # coderay sql
  INSERT INTO memos
    VALUES ("こんにちは"),
           ("こんばんは");

= 日本語 - 全文検索！

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%こんにち%";
  -- +-----------------+
  -- | content         |
  -- +-----------------+
  -- | こんにちは      |
  -- +-----------------+

= 全文検索の実装方法まとめ

  * (({DEFAULT CHARSET=utf8mb4}))
  * (({INSERT}))
  * (({LIKE "%キーワード%"}))
    * ANDもORも日本語も可
    * 大文字小文字無視も可

= 日本語をもっと！

  * (('note:いわゆる'))全角アルファベット対応

= 全角アルファベット

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%Ｈｅｌｌｏ%";
  -- +-----------------+
  -- | content         |
  -- +-----------------+
  -- +-----------------+

= Collation変更

  # coderay sql
  ALTER TABLE memos
    MODIFY COLUMN
      content
        TEXT
        COLLATE utf8mb4_unicode_ci;

= utf8mb4_unicode_ci

  * Unicode的に同じ文字を同一視\n
    (('note:（直感的だけど雑な説明）'))\n
    * 例：全角文字半角文字を同一視\n
      (('note:参考：MySQL 5.5 の unicode collation で同一視される文字'))\n
      (('note:http://tmtms.hatenablog.com/entry/20110416/mysql_unicode_collation'))
  * utf8mb4_general_ciより遅い

= 全角アルファベット

  # coderay sql
  SELECT *
    FROM memos
    WHERE content LIKE "%Ｈｅｌｌｏ%";
  -- +--------------+
  -- | content      |
  -- +--------------+
  -- | Hello world! |
  -- | Hello MySQL! |
  -- +--------------+

= 採用を検討

  * 機能は十分？
    * やりたいことと相談
  * 性能は十分？
    * データ量・リソースと相談
    * 実データが望ましい！！！
    * Webの情報は参考程度で実際に計測

= 性能検討例

  * データ：livedoorグルメ\n
    (('note:https://github.com/livedoor/datasets'))
    * 件数：約20万口コミ
  * CPU：Core i7 2.80GHz

= 文字数の傾向

  # coderay sql
  SELECT
      AVG(CHAR_LENGTH(comment)) AS average,
      MIN(CHAR_LENGTH(comment)) as min,
      MAX(CHAR_LENGTH(comment)) as max
    FROM ratings_all;
  -- average:  380.2013
  -- min:        2
  -- max:     6243

= %ラーメン%

  # coderay sql
  SELECT COUNT(*) AS count
    FROM ratings_all
    WHERE comment LIKE "%ラーメン%";
  -- count: 31428
  -- 0.898sec

= %ラーメン%の傾向

(('tag:center'))実行時間は総件数に比例

  # RT

  総件数, 時間（秒）

  1000, 0.01
  5000, 0.03
  10000, 0.05
  100000, 0.50
  205832, 0.89

= AND

  # coderay sql
  SELECT COUNT(*) AS count
    FROM ratings_all
    WHERE
      comment LIKE "%ラーメン%" AND
      comment LIKE "%焼き肉%";
  -- count: 69
  -- 1.01sec

= ANDの傾向

(('tag:center'))条件数1の場合とあまり変わらない

  # RT

  総件数, 時間（秒）, 条件数1

  1000, 0.01, 0.01
  5000, 0.03, 0.03
  10000, 0.06, 0.05
  100000, 0.57, 0.50
  205832, 1.01, 0.89

= OR

  # coderay sql
  SELECT COUNT(*) AS count
    FROM ratings_all
    WHERE
      comment LIKE "%ラーメン%" OR
      comment LIKE "%焼き肉%";
  -- count: 31994
  -- 1.37sec

= ORの傾向

(('tag:center'))2倍いかないくらいには増える

  # RT

  総件数, 時間（秒）, 条件数1

  1000, 0.02, 0.01
  5000, 0.05, 0.03
  10000, 0.09, 0.05
  100000, 0.77, 0.50
  205832, 1.37, 0.89

= 考察

  * 自分たちのデータ量は？
    * 各レコードのテキストサイズ
    * 総件数
  * どのくらい性能が必要？
    * リクエストあたりのレスポンスタイム
    * 単位時間あたりの処理数

= 考察例

  * 自分たちのデータ量は？
    * 各テキストサイズ：400文字くらい\n
      (('note:（データセットと同じくらい）'))
    * 総件数：2,3万くらい
  * どのくらい性能が必要？
    * s/req: 0.5秒以内
    * queries/s: 10

= 実行時間

(('tag:center'))0.2秒以内には終わりそう

  # RT

  総件数, 時間（秒）

  10000, 0.05
  100000, 0.50

= スループット

  * 1クエリー0.2秒
  * 1秒で5クエリー
  * CPUコア2つで10qpsいけそう

(('tag:center'))(('note:（実際は他の条件も加わる→もっと時間がかかるはず）'))

= 考察結果は？

  * LIKEで十分？
    * 機能面を性能面を検討
    * MySQLでLIKEで日本語全文検索！\n
      (('note:（全文検索エンジンが必要ないなら使わなくてよい）'))
  * LIKEだと不十分？
    * 別の選択肢を検討

= 別の選択肢

TODO
